var e={id:"operation-calculateScores",handler:async({keys:e,measureIds:t},{env:a,logger:r,accountability:o,services:n,getSchema:i})=>{try{const{ItemsService:a}=n,r=await i();let s=100;o.admin=!0;const c=new a("ratings_measures",{schema:r,accountability:o}),l=new a("measures",{schema:r,accountability:o}),u=new a("municipalities",{schema:r,accountability:o});let d={limit:-1};const m=await l.readByQuery(d);let h,f;if(f=null==t?[]:t,0===f.length){h=await c.readMany(e,d);const t=Object.values(h).map((e=>e.localteam_id));if(0===t.length)return;d={filter:{localteam_id:{_in:t}}}}const w=await u.readByQuery(d);for(const e of w){const t={};0===f.length?h.forEach((a=>{if(a.localteam_id===e.localteam_id){const e=m.find((e=>e.id===a.measure_id));void 0!==e&&(t[e.sector]={denominator:0,numerator:0})}})):m.forEach((function(e){f.includes(e.id)&&(t[e.sector]={denominator:0,numerator:0})})),t.total={denominator:0,numerator:0},d={filter:{_and:[{localteam_id:{_eq:e.localteam_id}}]}};let a=(await c.readByQuery(d)).map((e=>{const t=m.find((t=>t.id===e.measure_id));return null!=t.weight&&null!=t.sector&&null!=t.status?(e.weight=t.weight,e.sector=t.sector,e.measureStatus=t.status):(e.weight=0,e.sector="total",e.measureStatus="draft"),e}));for(const e of a){const{measure_id:a,applicable:r,weight:o,approved:n,status:i,rating:s,sector:c,measureStatus:l}=e;r&&"published"===l&&!f.includes(a)&&(t.total.denominator+=o,t[c]&&(t[c].denominator+=o),n&&"published"===i&&(t.total.numerator+=Number(s)*o,t[c]&&(t[c].numerator+=Number(s)*o)))}let r={};for(const e in t)t.hasOwnProperty(e)&&(t[e].denominator>0?r["score_"+e]=t[e].numerator/t[e].denominator:r["score_"+e]=0,r["score_"+e]*=s);await u.updateOne(e.id,r)}}catch(e){throw r.error(e),e}return{}}};export{e as default};
