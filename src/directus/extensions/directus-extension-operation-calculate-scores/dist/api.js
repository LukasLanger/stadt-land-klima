var t={id:"operation-calculateScores",handler:async({keys:t},{env:e,logger:a,accountability:o,services:r,getSchema:i})=>{try{const{ItemsService:e}=r,n=await i();a.info(t,"keys"),o.admin=!0;const s=new e("ratings_measures",{schema:n,accountability:o}),c=new e("measures",{schema:n,accountability:o}),l=new e("municipalities",{schema:n,accountability:o});let u={limit:-1};const d=await s.readMany(t,u),m=await c.readByQuery(u),f=Object.values(d).map((t=>t.localteam_id));if(0===f.length)return void a.info("NOthing to recalc");u={filter:{localteam_id:{_in:f}}};const h=await l.readByQuery(u);for(const t of h){const e={};d.forEach((a=>{if(a.localteam_id===t.localteam_id){const t=m.find((t=>t.id===a.measure_id));void 0!==t&&(e[t.sector]={denominator:0,numerator:0})}})),e.total={denominator:0,numerator:0},a.info(e,"scoreDict"+t.name),u={filter:{_and:[{localteam_id:{_eq:t.localteam_id}}]}};const o=await s.readByQuery(u);a.info(o,"allRatingsMeasures");let r=o.map((t=>{const e=m.find((e=>e.id===t.measure_id));return null!=e.weight&&null!=e.sector&&null!=e.status?(t.weight=e.weight,t.sector=e.sector,t.measureStatus=e.status):(t.weight=0,t.sector="total",t.measureStatus="draft"),t}));a.info(r,"ratingsMeasureDetail");for(const t of r){const{applicable:a,weight:o,approved:r,status:i,rating:n,sector:s,measureStatus:c}=t;a&&"published"===c&&(e.total.denominator+=3*o,e[s]&&(e[s].denominator+=3*o),r&&"published"===i&&(e.total.numerator+=n*o,e[s]&&(e[s].numerator+=n*o)))}a.info(e,"scoreDict");let i={};for(const t in e)e.hasOwnProperty(t)&&(e[t].denominator>0?i["score_"+t]=e[t].numerator/e[t].denominator:i["score_"+t]=1,i["score_"+t]*="total"===t?100:10);a.info(i,"scoresToPush");await l.updateOne(t.id,i)}}catch(t){throw a.error(t),new t}return{}}};export{t as default};
