var t={id:"operation-calculateScores",handler:async({keys:t},{env:e,logger:a,accountability:i,services:o,getSchema:r,database:s})=>{try{const{ItemsService:e}=o,n=await r();a.info(t,"keys"),i.admin=!0;const c=new e("ratings_measures",{schema:n,accountability:i}),l=new e("measures",{schema:n,accountability:i}),u=new e("municipalities",{schema:n,accountability:i});let d={limit:-1};const m=await c.readMany(t,d),h=await l.readByQuery(d),p=Object.values(m).map((t=>t.localteam_id));if(0===p.length)return void a.info("NOthing to recalc");d={filter:{localteam_id:{_in:p}}};const E=await u.readByQuery(d);for(const t of E){const e={};m.forEach((a=>{if(a.localteam_id===t.localteam_id){const t=h.find((t=>t.id===a.measure_id));void 0!==t&&(e[t.sector]={denominator:0,numerator:0})}})),e.total={denominator:0,numerator:0},a.info(e,"scoreDict"+t.name),d={filter:{_and:[{localteam_id:{_eq:t.localteam_id}}]}};const i=await c.readByQuery(d);a.info(i,"allRatingsMeasures");let o=i.map((t=>{const e=h.find((e=>e.id===t.measure_id));return null!=e.weight&&null!=e.sector&&null!=e.status?(t.weight=e.weight,t.sector=e.sector,t.measureStatus=e.status):(t.weight=0,t.sector="total",t.measureStatus="draft"),t}));a.info(o,"ratingsMeasureDetail");for(const t of o){const{applicable:a,weight:i,approved:o,status:r,rating:s,sector:n,measureStatus:c}=t;a&&"published"===c&&(e.total.denominator+=3*i,e[n]&&(e[n].denominator+=3*i),o&&"published"===r&&(e.total.numerator+=s*i,e[n]&&(e[n].numerator+=s*i)))}a.info(e,"scoreDict");let r={};for(const t in e)e.hasOwnProperty(t)&&(e[t].denominator>0?r["score_"+t]=e[t].numerator/e[t].denominator:r["score_"+t]=1,r["score_"+t]*="total"===t?100:10);a.info(r,"scoresToPush");await u.updateOne(t.id,r)}s.raw("WITH RankedScores AS ( \t\t\t\t\t\t\t\tSELECT \t\t\t\t\t\t\t\tid, \t\t\t\t\t\t\t\tDENSE_RANK() OVER (ORDER BY score_total DESC) AS place \t\t\t\t\t\t\t\tFROM \t\t\t\t\t\t\t\tpublic.municipalities \t\t\t\t\t\t\t\tWHERE status='published' \t\t\t\t\t\t\t) \t\t\t\t\t\t\t\t\t\t\t\t\tUPDATE public.municipalities AS t \t\t\t\t\t\t\tSET place = ( \t\t\t\t\t\t\t\tCASE \t\t\t\t\t\t\t\t\tWHEN t.status = 'published' THEN ( \t\t\t\t\t\t\t\t\t\tSELECT r.place \t\t\t\t\t\t\t\t\t\tFROM RankedScores r \t\t\t\t\t\t\t\t\t\tWHERE t.id = r.id \t\t\t\t\t\t\t\t\t) \t\t\t\t\t\t\t\t\tELSE -1 \t\t\t\t\t\t\t\tEND \t\t\t\t\t\t\t); \t\t\t\t\t").then((t=>{a.info(t,"resultsDB")})).catch((t=>{throw new ServiceUnavailableException(t.message)}))}catch(t){throw a.error(t),new t}return{}}};export{t as default};
